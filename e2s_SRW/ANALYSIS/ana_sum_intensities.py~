# -*- coding: utf-8 -*-
#############################################################################
# reading output file
#############################################################################

from __future__ import print_function #Python 2.7 compatibility
import sys
import os
from scipy.interpolate import griddata
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
import numpy as np
from matplotlib.ticker import NullFormatter


SMALL_SIZE = 30*0.4
MEDIUM_SIZE = 40*0.4
BIGGER_SIZE = 30*0.4

plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title

  


def read_data_file(FILIN):
    f = open(FILIN, 'r')

    header = {}
#for i in range(0, 100):
    flag = 1
    i    = 0
    while flag > 0:
        linea     = f.readline()
        if linea[0] is '#':
            header[i] = linea
            if 'Flux' in header[i]:
                text = header[i].strip('#')
                ts   = text.split()
                text = ts[0]+' '+ts[1]
                print(text)
            if 'Intensity' in header[i]:
                text = header[i].strip('#')
                ts   = text.split()
                text = ts[0]+' '+ts[1]
                print(text)

            if 'Initial Photon Energy' in header[i]:
                lin     = header[i].strip()
                col     = lin.split()
                Emin = col[0]
                Emin = Emin[1:]
                emin = float(Emin)
            if 'Final Photon Energy' in header[i]:
                lin     = header[i].strip()
                col     = lin.split()
                Emax = col[0]
                Emax = Emax[1:]
                emax = float(Emax)
            if 'Number of points vs Photon Energy' in header[i]:
                lin     = header[i].strip()
                col     = lin.split()
                Epoints = col[0]
                Epoints = Epoints[1:]
                epoints = int(Epoints)
                        
            i = i + 1
                        
        else:
            flag = -1 
  


# Loop over lines and extract variables of interest
    cnt = 0
    data = []
    columns = linea.split()
    data.append(float(columns[0]))  # the first data.append is on the linea 
    
    for line in f:
        line = line.strip()
        columns = line.split()
        
    
        data.append(float(columns[0]))
        cnt=cnt+1
        
    f.close()
    
    Z = data
        
    I=np.array(Z)

    return I,header,text



FILIN1 = sys.argv[1]
FILIN2 = sys.argv[2]

I1,header1,ylabel1 = read_data_file(FILIN1)
I2,header2,ylabel2 = read_data_file(FILIN2)

print(header1)
print(I1)
print(header2)
print(I2)

M = (np.array(I1),np.array(I2))
Itot = np.average(M,axis=0)
f = open('SUM.dat', 'w')
for i in xrange(len(header1)):
    f.write(str(header1[i]))
for i in xrange(len(Itot)):
    f.write(str(Itot[i])+'\n')
f.close()


#for i in xrange(len(Itot)):
#      mu= float(Itot[i])
#      n=np.random.normal(mu,12e+11,616)

#f_new = open('SUM.dat', 'w')
#for i in xrange(len(header1)):
#    f_new.write(str(header1[i]))
#for i in xrange(len(n)):
#    f_new.write(str(n[i])+'\n')
#f_new.close()


